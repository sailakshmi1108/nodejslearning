**https://youtu.be/Oe421EPjeBE**
https://course-api.com/
https://johnsmilga.com/

built-in-modules
1.OS
2.PATH
3.FS(File System)
4.HTTP

FOR DOC- https://nodejs.org/dist/latest-v18.x/docs/api/

1.os- IT GIVES MORE PROPERTIES AND METHODS TO INTERACT WITH OS AND SERVER

2.path- like it gives absolute path of file,basname and separator to the files

ex:absolute path=C:\Users\MISAILAK\Desktop\nodejstutorial\content\subfolder\test.txt
    basename: test.txt
    sep(separator): content\subfolder\test.txt

3.FS- for interacting with file
   --asynchronously non-blocking  -more prefer
   --synchronously blocking

    -SYNC
   -in readFileSync method we give 2 parameters-1.path of file, 2. what is the encoding(here for encoding we r using utf8(inka ascii,binary,base64))
   -writeFileSync-(path,content)

    -ASYNC
    -READfILE(PATH,CALLBACK FN)   

    sync-js reading the code synchronuously,it just goes line by line..its take long time then our application will go down.no other user cxan do anything with application

   async-asynch-  we just off load the "readfile" and continue with code. so other users can use the application code


   "CALL BACKS" are some what messy -  alternatives are -promises 
   and async await  (easy)

   callbacks are a special type of function passed as an argument to another function. They're called when the function that contains the callback as an argument completes its execution, and allows the code in the callback to run in the meantime. Callbacks help us make asynchronous calls.


4.HTTP: WHICH IS GOING TO allow us to set up web server

  req=represents incoming request-ex:if client is requesting fron web browser,so or web page will have info about the method and all the stuff in that request object.
  rep=what we are sending back  (//we are send back this result=response according to the request)

   res(response-object) have some methods
   1.write
   2.end -after sending back the response,we will end request

   webserver-
   what they do-
   keep on listening to


   url-for what address client is addressing


NPM=node package manager package
enables us to do 3 things
-reuse our own code in other projects
-use code written by other developers

**url:npmjs.com**

npm --version
local dependency -use it only inparticular project
npm i <packageName>

global dependency-use it in any project
npm install -g <packageName>


package.json-manifest file(stores important info about project/package and it contains dependencies)
  //manual approach(create package.json in the root,create properties etc.)
  //npm init (step by step ,press enter to skip)
  //npn init -y(everything default)
   -so,if we install any local packages it will save as "dependencies(just  **dependency name and version ****we can see)" in package.json file.
   and also all these dependencies will store in "**node modules** " folder(**dependencies full details**and also can see files that they are dependent on) ,which was create by npm .

   -so some packages use  more dependencies,they will automatically installed as well.
   ex:npm i bootstrap


.**gitignore**   --which files can be ignored by source control(git)
    -git init   (//error-sol:https://www.youtube.com/watch?v=h6xnrdn5sQc)    close vs code and open
    1-git add .
    2-git commit -m "first commit"
    then 
    copy the 3 command of your repository and execute in terminal in order to "get remote url".    
            git remote add origin https://github.com/sailakshmi1108/nodejslearning.git
            git branch -M main
    3-git push -u origin main

   **package.json use**-
   this folder we dont get in git.but bcz of package.json we can share the code 
without dragging massive "node modules folder" with us.we can just simply provide what 
packages our project is using and then once we get repo then we just run "npm install"command,then npm will install all the packages that are in the dependencies


for production purpose :  npm i nodemon --save-dev     
   - we can the devDepency name as "nodemon": "^2.0.21" in package.json


npm uninstall <packagename>
another way:
    delete nodemodules folder
    delete packagelock.json
    and remove that denedency(ex:bootstrap) from package.json


start in package,json : when we give "npm start" it will run the nodemon.app.js file


**NPX**
    EXECUTE
    package runner 



**EVENT LOOP**  ::  

     ** **https://course-api.com/****    -SLIDES 
  
     --we can offload time consuming operations.
       -javascript is synchronous,single thraded,line by line executed. ex:after call back fn only next task will be executed,it will take lot of time..rather than waiting for till call back fn executed for moving next task,we can resolve this by "offload" to the callback fn.

       The setTimeout() method(asynchronous) is used to call a function after a certain period of time. The setInterval()((-asynchronous)) Javascript method is used to call a function "repeatedly" at a specified interval of time.

**PROMISES**
      Promise is a placeholder for a value that will be available in the future, allowing us to handle the result of an asynchronous task once it has completed or encountered an error. Promises make writing asynchronous code easier. They're an improvement on the callback pattern and very popular in Node.

      
      Inside an async function, you can use the await keyword before a call to a function that returns a promise. This makes the code wait at that point until the promise is settled, at which point the fulfilled value of the promise is treated as a return value, or the rejected value is thrown.


      # promise anedhi settle ayintha varaki **await** fn wait chetsundhi..so,settle ayinaka appudu await function excute avuthundhi ante values ni return chestadhi(may be promise value use chesukovachu) like "synchronous" la work chestadhi.

      

      ****#  promises are special objects that help you perform "asynchronous" operations**.(ante ee promise vunna fn result kosam wait cheyakunda next fn first print avudhi,tharvatha promise dhi result- "2-await-pattern.js" )**we will pass the callbacks into that. promise is like good pattern compare with "11-fs-async" file.
      indhulo lo 2 times file ni read cheyataniki 2 fns rasamu . so ala rayakunda promise fn lo okasari create chesi,then aa result ni use chesi 2nd file create chesamu.


    **EVENT module**:
    by using events you can create, fire, and listen for your events.
        2-methods:
       on (-pass (event name,callback fn)-listen for an event
       emit (pass event name)-emit an event

       event emitter:An event emitter is a pattern that listens to a named event, fires a callback, then emits(will get response) that event with a value.

    **STREAM**: These streams can be used to read and write data from files. Pipes can be used to connect multiple streams together.

        if we taking the approach of sync/async- we reading the whole file ,we are assigning to ove variable,if it is big file,uses whole memory, as file size gets bigger and bigger eventually variable is not good enough..will get error as size problem..
        solution: stream


    
    HOW THE WEB WORKS ? (HOW WE EXCHANGE DATA ON WEB)

                We are entering web url-that is we are  requesting to that server(server-responsible for serveing the resources). then server sends you back the response.that is done by "http protocol"(http messages).
user sends the http request messages and then server send http response messages.


url-address
header=meta inf about request
optional body-if u want to add the resource to the server,then we use this body ,also u r expected to provide data .this is called "payload"

(from browser) request->here -server is node/express -> response ->browser


both req and response messages have - start line,optional headers,
etc.

in response message
status code:200 (req was success.amd server wea sending the response)
      :400 (req failed)
	:401 (resource was not found)
remote address=ip address



nodemon is a tool that helps develop node. js based applications by automatically restarting the node application when file changes in the directory are detected.




https://tsoa-community.github.io/docs/di.html



# Create a new folder for our project
mkdir tsoa-project
cd tsoa-project

# Create a package.json and initialize git
git init
yarn init -y       //created package.json

# Add our dependencies
yarn add tsoa express     //create package.lock.json
yarn add -D typescript @types/node @types/express     //node modules folder

# Initialize tsconfig.json
(npx tsc --init --resolveJsonModule --target es6)
npm run tsc --init

npm install tsoa --save

7.// "test": "echo \"Error: no test specified\" && exit 1"





build-combine multiple JavaScript files into one single file or bundle that can be used in the browser to load your application.


npm run tsc --init



tsoa-
we can get accurate,correct and uptodate open api specifications from our typescript code
it is flexible for some framworks like express,koa,hapi etc.,in our projec we r using express js..
and also tsoa applications are type-safe by default


A regular expression (also called regex or regexp) is a way to describe a pattern. It is used to locate or validate specific strings or patterns of text in a sentence, document, or any other character input


https://www.npmjs.com/package/express-register-routes

*https://www.simplilearn.com/tutorials/nodejs-tutorial/body-parser-in-express-js

CLI-command line interface

nodemon is a tool -helps develop Node.js based applications by automatically restarting the node application when file changes in the directory are detected.
y restarts the node application whenever it observes the changes in the file present in the working directory of your projec


tsoa uses short descriptions provided via the JSDocannotation









MY TASKS-CODC

1.
restrict all the users other than below extensions for registration to CODC

ingka.com
inter.ikea.com
ingka.ikea.com
